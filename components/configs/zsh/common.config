# common

export EDITOR="hx"

# remove less history file
export LESSHISTFILE=/dev/null

# remove .python_histroy file
rm ~/.python_history 2>/dev/null

# store last 1000 commands in memory
HISTSIZE=1000
# no history file
HISTFILE=/dev/null
SAVEHIST=0

# various options that I don't like
setopt nomatch
unsetopt appendhistory autocd beep extendedglob notify

# personal settings
ls() {
    command ls -lashFv "$@"
}

NIX_DIR="/etc/nixos/nixos_config"

switch() {
    sudo nixos-rebuild switch --impure --flake $NIX_DIR\#"$@"
}

update() {
    # go to nixos directory
    pushd $NIX_DIR
    # check if current directory clean
    if output=$(git status --porcelain; git diff origin/main HEAD) && [[ "$output" ]]; then 
      popd
      return 1
    fi
    # update git repository
    git pull --ff-only
    switch $(hostname) || true
    # go back to original directory
    popd
    return 0
}

hard() {
    "$@" && sudo shutdown -r now
}

clean() {
    sudo nix-collect-garbage -d || return -1
    sudo nix-store --verify --check-contents --repair || return -1
}

git() {
    if [[ $1 == "graph" ]]; then
        git log --all --decorate --oneline --graph "${@:2}"

    elif [[ $1 == "new" ]]; then
        # $2 = response
        if [[ "2" != "$#" ]]; then
            echo "git new takes 1 argument, the project name"
            return -1
        fi
        # check if already exists
        local localGitDir="/home/user/projects"
        local remoteGitDir="/var/git"
        if ( [[ -d "$localGitDir/$2" ]] || ssh -q desktop "[[ -d "$remoteGitDir/$2" ]]" ) then
            echo "project with this name exists"
            return -1
        else
            # if a project with that name doesn't exist
            # save the output of ssh to see if it failed
            connStatus=$?
        fi
        # connection check
        if [[ $connStatus != "1" ]]; then
            echo "no connection"
            return -1
        fi
        # remote
        ssh desktop "mkdir $remoteGitDir/$2; cd $remoteGitDir/$2; git init --bare --initial-branch main"
        # local
        mkdir $localGitDir/$2; cd $localGitDir/$2
        touch .gitignore
        git init -b main
        git add .
        git commit -m "* initial commit"
        git remote add origin desktop:$remoteGitDir/$2
        git push --set-upstream origin main

    else
        command git "$@"
    fi
}
